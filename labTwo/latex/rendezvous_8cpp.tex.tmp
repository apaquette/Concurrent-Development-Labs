\hypertarget{rendezvous_8cpp}{}\doxysection{rendezvous.\+cpp File Reference}
\label{rendezvous_8cpp}\index{rendezvous.cpp@{rendezvous.cpp}}


main file for demonstrating rendezvous  


{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\newline
{\ttfamily \#include $<$thread$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include $<$iostream$>$}\newline
Include dependency graph for rendezvous.\+cpp\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{rendezvous_8cpp_a1ae9fac7e1843e97ee0a25835716843e}{task}} (std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$ mutex\+Sem, std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$ barrier\+Sem, std\+::shared\+\_\+ptr$<$ int $>$ thread\+Count)
\begin{DoxyCompactList}\small\item\em Displays the first function in the barrier being executed. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{rendezvous_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main}} (void)
\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
main file for demonstrating rendezvous 



\doxysubsection{Function Documentation}
\mbox{\Hypertarget{rendezvous_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{rendezvous_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{rendezvous.cpp@{rendezvous.cpp}!main@{main}}
\index{main@{main}!rendezvous.cpp@{rendezvous.cpp}}
\doxysubsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}

$<$ An array of threads

$<$ Pointer to barrier object\mbox{\Hypertarget{rendezvous_8cpp_a1ae9fac7e1843e97ee0a25835716843e}\label{rendezvous_8cpp_a1ae9fac7e1843e97ee0a25835716843e}} 
\index{rendezvous.cpp@{rendezvous.cpp}!task@{task}}
\index{task@{task}!rendezvous.cpp@{rendezvous.cpp}}
\doxysubsubsection{\texorpdfstring{task()}{task()}}
{\footnotesize\ttfamily void task (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$}]{mutex\+Sem,  }\item[{std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$}]{barrier\+Sem,  }\item[{std\+::shared\+\_\+ptr$<$ int $>$}]{thread\+Count }\end{DoxyParamCaption})}



Displays the first function in the barrier being executed. 


\begin{DoxyParams}{Parameters}
{\em mutex\+Sem} & Mutex used to wait for thread\+Count access \\
\hline
{\em barrier\+Sem} & Barrier to indicate thread\+Count is released \\
\hline
{\em thread\+Count} & Number of threads that will run the task \\
\hline
\end{DoxyParams}
